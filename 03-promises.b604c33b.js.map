{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SASA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,wBAC/BI,gBAAiBL,SAASC,cAAc,WAG1C,SAASK,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEF,E,MAAUL,IAEtBQ,EAAO,C,SAAEH,E,MAAUL,GAAQ,GAC1BA,EAAM,G,CAIbJ,EAAKO,gBAAgBU,iBAAiB,SAASC,IAC7CA,EAAEC,iBACF,IAAIC,EAAaC,SAASC,OAAOtB,EAAKI,MAAMmB,QAC5C,MAAMC,EAAYH,SAASC,OAAOtB,EAAKK,KAAKkB,QACtCjB,EAASe,SAASC,OAAOtB,EAAKM,OAAOiB,QAE3C,IAAK,IAAIE,EAAI,EAAGA,GAAKnB,EAAQmB,GAAK,EACjCC,QAAQC,IAAIP,EAAYI,EAAWlB,GACnCE,EAAciB,EAAGL,GAAYQ,MAAK,EAACnB,SAACA,EAAQL,MAAEA,MAC7CyB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqBtB,QAAiBL,MAAU,IACtE4B,OAAM,EAACvB,SAACA,EAAQL,MAAEA,MACpByB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAoBxB,QAAiBL,MAAU,IAExEgB,GAAcI,C","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Notiflix from 'notiflix';\n\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n/*\n * @param1 {string}: Required, a text in string format.\n * @param2 {function | Object}: Optional, a callback function that will be called when the notification element has been clicked. Or, extending the initialize options with the new options for each notification element.\n * @param3 {Object}: Optional, extending the initialize options with new the options for each notification element. (If the second parameter has been already used for a callback function.)\n */\n\nconst refs = {\n  form: document.querySelector('form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  btnSrartPromise: document.querySelector('button'),\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\nrefs.btnSrartPromise.addEventListener('click', e => {\n  e.preventDefault();\n  let firstDelay = parseInt(Number(refs.delay.value));\n  const delayStep = parseInt(Number(refs.step.value));\n  const amount = parseInt(Number(refs.amount.value));\n\n  for (let i = 1; i <= amount; i += 1) {\n   console.log(firstDelay, delayStep, amount);\n   createPromise(i, firstDelay).then(({position, delay}) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n   }).catch(({position, delay}) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n   });\n   firstDelay += delayStep;\n  };\n});\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","btnSrartPromise","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","firstDelay","parseInt","Number","value","delayStep","i","console","log","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.b604c33b.js.map"}